集成Jsp
一 war 或者 启动类集成一个类重写一个方法
二 依赖2个 tomcat jasper
三 配置2个 prefix suffix

集成swagger
一 依赖2个 swagger ui
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>2.7.0</version>
</dependency>
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.7.0</version>
</dependency>
二 注解4个 
启动类@enableswagger2  
rest方法apioperation 
rest方法模型参数@apimodelproperty 
rest方法简单参数@apiparam

集成测试用例
一 依赖1个
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <version>1.5.8.RELEASE</version>
    <scope>test</scope>
</dependency>
二 注解2个
@RunWith(SpringRunner.class)
@SpringBootTest
public class UserControllerTest {
	@Autowired
	private WebApplicationContext wac;

	private MockMvc mockMvc;

	@Before
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();
	}

	@Test
	public void whenQuerySuccess() throws Exception {
		String result = mockMvc.perform(
				get("/user").param("username", "jojo").param("age", "18").param("ageTo", "60").param("xxx", "yyy")
						    .param("size", "15")
						    .param("page", "3")
						    .param("sort", "age,desc")
						.contentType(MediaType.APPLICATION_JSON_UTF8))
				.andExpect(status().isOk()).andExpect(jsonPath("$.length()").value(3))
				.andReturn().getResponse().getContentAsString();
		
		System.out.println(result);
	}
}

集成Restful API
一 类@Controller @RestController
二 方法@RequestMapping @GetMapping @PostMapping
三 方法简单参数ur拼接@RequestParam（value，required，defaultValue）
四 rest大括号中的参数支持正则@PathVariable
五 方法参数Pageable @PageableDefault（page，size，sort）dao不用spring data时一般也不用
六 Post方法传参映射到参数对象@requestBody

